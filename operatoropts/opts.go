package operatoropts

import (
	"os"

	"github.com/spf13/pflag"
	ctrl "sigs.k8s.io/controller-runtime"
)

type OperatorOptions struct {
	Namespace     string
	PrivateBucket string
	PublicBucket  string
	Config        string
	K8sToolImage  string
}

func (o *OperatorOptions) BindFlags(flags *pflag.FlagSet) {
	flags.StringVarP(&o.Namespace, "namespace", "n", os.Getenv("NAMESPACE"), "The namespace of where the operator runs in")
	flags.StringVarP(&o.Config, "config", "c", "./config.yaml", "The controller will load its initial configuration from this file. "+
		"Omit this flag to use the default configuration values. "+
		"Command-line flags override configuration from this file.")
	flags.StringVar(&o.PrivateBucket, "private-bucket", os.Getenv("PRIVATE_BUCKET"), "The bucket to store objects generated by operator")
	flags.StringVar(&o.PublicBucket, "public-bucket", os.Getenv("PUBLIC_BUCKET"), "The bucket to store objects generated by operator")
	flags.StringVar(&o.K8sToolImage, "k8s-tool-image", GetEnv("K8S_TOOL_IMAGE", "alpine/k8s:1.24.8"), "The image to use for k8s-tool")
}

func BindRuntimeOptionFlags(o *ctrl.Options, flags *pflag.FlagSet) {
	flags.StringVar(&o.Host, "webhook.host", "", "Host is the hostname that the webhook server binds to.")
	flags.IntVar(&o.Port, "webhook.port", 8081, "Host is the hostname that the webhook server binds to.")
	flags.StringVar(&o.MetricsBindAddress, "metrics.bind", ":9666", "Metrics bind address")
	flags.StringVar(&o.HealthProbeBindAddress, "health.bind", GetEnv("HEALTH_BIND", ":8086"), "Health probe bind address")
	flags.BoolVar(&o.LeaderElection, "election", GetEnvBool("ELECTION", true), "enable leader election")
	flags.StringVar(&o.LeaderElectionID, "election.id", "election.operator.altayer.io", "leader election resource id")
}
